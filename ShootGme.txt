package com.terena.shoot;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;


public class ShootGame extends JPanel {
    public static final int WIDTH=400;
    public static final int HEIGHT=654;

    public static BufferedImage background;
    public static BufferedImage airplane;
    public static BufferedImage bee;
    public static BufferedImage bullet;
    public static BufferedImage hero;
    public static BufferedImage hero1;
    public static BufferedImage pause;
    public static BufferedImage start;
    public static BufferedImage gameover;

    private  Timer timer;
    private int intervel=1000/100;
    private int score=0;


    private int state;
    private static final int START=0;
    private static final int RUNNING=1;
    private static final int PAUSE=2;
    private static final int GAME_OVER=3;

    private FlyingObject [] flyling={};//敌飞机组
    private  FlyingObject []backgrounts={};

    private  Bullet [] bullets={};//子弹组
    private  Hero hero2=new Hero();

    public ShootGame(){
        flyling=new FlyingObject[2];
        flyling[0]=new AirPlane();
        flyling[1]=new Bee();

        bullets=new Bullet[1];
        bullets[0]=new Bullet(200,350);
    }


    static{
        try{
            background= ImageIO.read(ShootGame.class.getResource("background.png"));
            start = ImageIO.read(ShootGame.class.getResource("start.png"));
            pause = ImageIO.read(ShootGame.class.getResource("pause.png"));
            gameover = ImageIO.read(ShootGame.class.getResource("gameover.png"));
            airplane = ImageIO.read(ShootGame.class.getResource("airplane.png"));
            bee = ImageIO.read(ShootGame.class.getResource("bee.png"));
            bullet = ImageIO.read(ShootGame.class.getResource("bullet.png"));
            hero = ImageIO.read(ShootGame.class.getResource("hero.png"));
            hero1 = ImageIO.read(ShootGame.class.getResource("hero1.png"));
        }catch(Exception e){
            e.printStackTrace();
        }
    }


    @Override
    public  void paint(Graphics g){

     g.drawImage(background,0,0,null);

        paintHero(g);
        paintBullets(g);
        paintFlyingObjects(g);
        paintScore(g);
        paintState(g);
    }
     

 public void paintHero(Graphics g){
        g.drawImage(hero2.getImage(),hero2.getX(),hero2.getY(),null);
 }

public void paintBullets(Graphics g){
        for(int i=0;i<bullets.length;i++) {
            Bullet b = bullets[i];
            g.drawImage(b.getImage(), b.getX(), b.getY(), null);
        }

}
public void paintFlyingObjects(Graphics g){
      for(int i=0;i<flyling.length;i++){
          FlyingObject f=flyling[i];
          g.drawImage(f.getImage(),f.getX(),f.getY(),null);
      }

}
public void paintScore(Graphics g){
        int x=10;
        int y=25;
        Font font=new Font(Font.SANS_SERIF,Font.BOLD,14);
        g.setColor(new Color(0x3A3B3B));
        g.setFont(font);
        g.drawString("SCORE:"+score,x,y);
        y+=20;
        g.drawString("LIFE:"+hero2.getLife(),x,y);
}

public void paintState(Graphics g){
switch (state){
    case START:
        g.drawImage(start,0,0,null);
        break;
    case PAUSE:
       g.drawImage(pause,0,0,null);
        break;
    case GAME_OVER:
        g.drawImage(gameover,0,0,null);
        break;
}
}

public  static  FlyingObject nextOne(){
    Random random= new Random();
    int type=random.nextInt(20);
    if(type==0){
        return  new Bee();
    }
    else return new AirPlane();
}


int flyEnteredIndex=0;

    public void enterAction(){
          flyEnteredIndex++;
          if(flyEnteredIndex%40==0){
          FlyingObject obj= nextOne();
          flyling = Arrays.copyOf(flyling,flyling.length+1);
          flyling[flyling.length-1]=obj;
          }
    }
    public void stepAction(){
        for(int i=0;i<flyling.length;i++){
            FlyingObject f=flyling[i];
            f.step();
        }
  for(int i=0;i<bullets.length;i++){
            Bullet b=bullets[i];
            b.step();
  }
      hero2.step();
    }

    public  void action(){
        MouseAdapter l=new MouseAdapter(){
         @Override
            public void mouseMoved(MouseEvent e){
             if(state==RUNNING){
           int x=e.getX();
           int y=e.getY();
           hero2.moveTo(x,y);
             }
         }
           @Override
             public void mouseEntered(MouseEvent e){
               if(state==PAUSE){
                   state=RUNNING;
               }
             }
             @Override
            public void mouseExited(MouseEvent e){
                     if(state!=GAME_OVER){
                         state=PAUSE;
                     }

             }

             @Override
            public void mouseClicked(MouseEvent e){
                 switch (state) {
                     case START:
                         state=RUNNING;
                         break;
                     case GAME_OVER:
                         flyling=new FlyingObject[0];
                         bullets=new Bullet[0];
                         hero2=new Hero();
                         score=0;
                         state=START;
                         break;
                 }
             }
           };
        this.addMouseListener(l);
        this.addMouseMotionListener(l);//处理鼠标滑动动作

        timer =new Timer();
        timer.schedule(new TimerTask(){
         @Override
                 public void run(){
             if(state==RUNNING){
             enterAction();
             stepAction();
             shootAction();

             bangAction();
             outOfBoundsAction();
             checkGameOverAction();}
             repaint();
            }
            } ,intervel,intervel);
    }


int shootIndex=0;
    public void shootAction(){
        shootIndex++;
        if(shootIndex%30==0){
            Bullet []bs=hero2.shoot();
            bullets=Arrays.copyOf(bullets,bullets.length+bs.length);//扩容
            System.arraycopy(bs,0,bullets,bullets.length-bs.length,bs.length);//追加数组
        }
    }

    public void bangAction(){
        for(int i=0;i<bullets.length;i++){
            Bullet  b= bullets[i];
            bang(b);
        }
    }

    public void bang(Bullet bullet){
        int index=-1;
        for(int i=0;i<flyling.length;i++){
            FlyingObject obj=flyling[i];
            if(obj.shootBy(bullet)){
                index=i;
                break;
            }
        }
        if(index!=-1){
            FlyingObject one=flyling[index];
               FlyingObject temp=flyling[index];
               flyling[index]=flyling[flyling.length-1];
                flyling[flyling.length-1]=temp;
                flyling=Arrays.copyOf(flyling,flyling.length-1);

            if(one instanceof Enemy){
            Enemy e=(Enemy)one;
            score+=e.getScore();
            }
            if(one instanceof Award){
                Award a=(Award)one;
                int type=a.getType();
                switch (type){
                    case Award.DOUBLE_FIRE:
                        hero2.addDoubleFire();
                        break;
                    case Award.LIFE:
                        hero2.addLife();
                          break;
                }
            }

    }}

    public void outOfBoundsAction(){
        int index=0;
        FlyingObject flyingLiver[]=new FlyingObject[flyling.length];
         for(int i=0;i<flyling.length;i++){
             FlyingObject f=flyling[i];
               if(!f.outOfBounds()){
                flyingLiver[index++]=f;
           }
             }
              flyling=Arrays.copyOf(flyingLiver,index);

           index=0;
           Bullet []bulletLiver=new Bullet[bullets.length];
            for(int i=0;i<bullets.length;i++){
               Bullet b=bullets[i];
               if(!b.outOfBounds()){
                   bulletLiver[index++]=b;
        }
        }
   bullets=Arrays.copyOf(bulletLiver,index);

    }


    public boolean isGameOver(){
        for(int i=0;i<flyling.length;i++){
            int index=-1;
            FlyingObject obj=flyling[i];
            if(hero2.hit(obj)){
                hero2.setDoubleFire(0);
                hero2.setLife();
                index=i;
            }
            if(index!=-1){
                FlyingObject t=flyling[index];
                flyling[index]=flyling[flyling.length-1];
                flyling[flyling.length-1]=t;
                flyling=Arrays.copyOf(flyling,flyling.length-1); }
        }
               return  hero2.getLife()<=0;
    }

    public void checkGameOverAction(){
        if(isGameOver()){
            state=GAME_OVER;
        }
    }



    public  static void main(String[]args){
        JFrame frame =new JFrame("Fly");
        ShootGame game=new ShootGame();
        frame.add(game);
        frame.setSize(WIDTH,HEIGHT);
        frame.setAlwaysOnTop(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        game.action();
    }

}
























